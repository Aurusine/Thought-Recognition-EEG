function [trainedClassifier, validationAccuracy] = CLASSIFICATIONLEARNERTEST(Final)
% trainClassifier(trainingData)
%  returns a trained classifier and its accuracy.
%  This code recreates the classification model trained in
%  Classification Learner app.
%
%   Input:
%       trainingData: the training data of same data type as imported
%        in the app (table or matrix).
%
%   Output:
%       trainedClassifier: a struct containing the trained classifier.
%        The struct contains various fields with information about the
%        trained classifier.
%
%       trainedClassifier.predictFcn: a function to make predictions
%        on new data. It takes an input of the same form as this training
%        code (table or matrix) and returns predictions for the response.
%        If you supply a matrix, include only the predictors columns (or
%        rows).
%
%       validationAccuracy: a double containing the accuracy in
%        percent. In the app, the History list displays this
%        overall accuracy score for each model.
%
%  Use the code to train the model with new data.
%  To retrain your classifier, call the function from the command line
%  with your original data or new data as the input argument trainingData.
%
%  For example, to retrain a classifier trained with the original data set
%  T, enter:
%    [trainedClassifier, validationAccuracy] = trainClassifier(T)
%
%  To make predictions with the returned 'trainedClassifier' on new data T,
%  use
%    yfit = trainedClassifier.predictFcn(T)
%
%  To automate training the same classifier with new data, or to learn how
%  to programmatically train classifiers, examine the generated code.

% Auto-generated by MATLAB on 08-Oct-2017 20:24:53


% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
inputTable = Final;
predictorNames = {'RMSA', 'RMSB', 'DASDVA', 'DASDVB', 'fftmean1', 'fftmean2', 'fftmean3', 'fftmean4', 'fftmean5', 'fftmean6', 'fftmean7', 'fftmean8', 'fftmean9', 'fftmean10', 'fftmean11', 'fftmean12', 'fftmean13', 'fftmean14', 'fftmean15', 'fftmean16', 'fftmean17', 'fftmean18', 'fftmean19', 'fftmean20', 'fftmean21', 'fftmean22', 'fftmean23', 'fftmean24', 'fftmean25', 'fftmean26', 'fftmean27', 'fftmean28', 'fftmean29', 'fftmean30', 'fftmean31', 'fftmean32', 'fftmean33', 'fftmean34', 'fftmean35', 'fftmean36', 'fftmean37', 'fftmean38', 'fftmean39', 'fftmean40'};
predictors = inputTable(:, predictorNames);
response = inputTable.Action;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Train a classifier
% This code specifies all the classifier options and trains the classifier.
classificationEnsemble = fitensemble(...
    predictors, ...
    response, ...
    'Bag', ...
    30, ...
    'Tree', ...
    'Type', 'Classification', ...
    'ClassNames', categorical({'Cylindrical'; 'Key'; 'Pinch'; 'Open'}, {'Cylindrical' 'Key' 'Pinch' 'Open'}));

% Create the result struct with predict function
predictorExtractionFcn = @(t) t(:, predictorNames);
ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));

% Add additional fields to the result struct
trainedClassifier.RequiredVariables = {'RMSA', 'RMSB', 'DASDVA', 'DASDVB', 'fftmean1', 'fftmean2', 'fftmean3', 'fftmean4', 'fftmean5', 'fftmean6', 'fftmean7', 'fftmean8', 'fftmean9', 'fftmean10', 'fftmean11', 'fftmean12', 'fftmean13', 'fftmean14', 'fftmean15', 'fftmean16', 'fftmean17', 'fftmean18', 'fftmean19', 'fftmean20', 'fftmean21', 'fftmean22', 'fftmean23', 'fftmean24', 'fftmean25', 'fftmean26', 'fftmean27', 'fftmean28', 'fftmean29', 'fftmean30', 'fftmean31', 'fftmean32', 'fftmean33', 'fftmean34', 'fftmean35', 'fftmean36', 'fftmean37', 'fftmean38', 'fftmean39', 'fftmean40'};
trainedClassifier.ClassificationEnsemble = classificationEnsemble;
trainedClassifier.About = 'This struct is a trained classifier exported from Classification Learner R2016a.';
trainedClassifier.HowToPredict = sprintf('To make predictions on a new table, T, use: \n  yfit = c.predictFcn(T) \nreplacing ''c'' with the name of the variable that is this struct, e.g. ''trainedClassifier''. \n \nThe table, T, must contain the variables returned by: \n  c.RequiredVariables \nVariable formats (e.g. matrix/vector, datatype) must match the original training data. \nAdditional variables are ignored. \n \nFor more information, see <a href="matlab:helpview(fullfile(docroot, ''stats'', ''stats.map''), ''appclassification_exportmodeltoworkspace'')">How to predict using an exported model</a>.');

% Extract predictors and response
% This code processes the data into the right shape for training the
% classifier.
inputTable = Final;
predictorNames = {'RMSA', 'RMSB', 'DASDVA', 'DASDVB', 'fftmean1', 'fftmean2', 'fftmean3', 'fftmean4', 'fftmean5', 'fftmean6', 'fftmean7', 'fftmean8', 'fftmean9', 'fftmean10', 'fftmean11', 'fftmean12', 'fftmean13', 'fftmean14', 'fftmean15', 'fftmean16', 'fftmean17', 'fftmean18', 'fftmean19', 'fftmean20', 'fftmean21', 'fftmean22', 'fftmean23', 'fftmean24', 'fftmean25', 'fftmean26', 'fftmean27', 'fftmean28', 'fftmean29', 'fftmean30', 'fftmean31', 'fftmean32', 'fftmean33', 'fftmean34', 'fftmean35', 'fftmean36', 'fftmean37', 'fftmean38', 'fftmean39', 'fftmean40'};
predictors = inputTable(:, predictorNames);
response = inputTable.Action;
isCategoricalPredictor = [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false];

% Perform cross-validation
partitionedModel = crossval(trainedClassifier.ClassificationEnsemble, 'KFold', 5);

% Compute validation accuracy
validationAccuracy = 1 - kfoldLoss(partitionedModel, 'LossFun', 'ClassifError');

% Compute validation predictions and scores
[validationPredictions, validationScores] = kfoldPredict(partitionedModel);
